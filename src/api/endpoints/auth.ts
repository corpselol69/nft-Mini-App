import { setToken, setUser } from "@/slices/authSlice"
import { setWallet, setWalletError } from "@/slices/walletSlice"
import { api } from "../api"
import type { TelegramWebAppLoginPayload, Token } from "@/types/auth"
import type { User } from "@/types/user"
import { setAccessToken } from "../apiClient"
import { walletApi } from "./wallets"
import { usersAPI } from "./users"
import { financeApi } from "./finance"
import { setUserBalance } from "@/slices/financeSlice"

const endpoint = "/auth"

export const authAPI = api.injectEndpoints({
  endpoints: builder => ({
    login: builder.mutation<Token, TelegramWebAppLoginPayload>({
      query: data => ({
        url: `${endpoint}/login/webapp`,
        method: "POST",
        data,
      }),
      async onQueryStarted(_, { dispatch, queryFulfilled }) {
        try {
          const { data: tokenData } = await queryFulfilled

          // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
          dispatch(setToken(tokenData.access_token))
          setAccessToken(tokenData.access_token) // üëà –¥–ª—è axios

          // 2. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const user = await dispatch(
            usersAPI.endpoints.getMe.initiate()
          ).unwrap()
          dispatch(setUser(user))

          // 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—ë–∫
          const wallet = await dispatch(
            walletApi.endpoints.getWallet.initiate()
          ).unwrap()
          dispatch(setWallet(wallet[0]))

          const balance = await dispatch(
            financeApi.endpoints.getBalance.initiate()
          ).unwrap()
          dispatch(setUserBalance(balance.available))
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞:", error)
          dispatch(setWalletError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫"))
        }
      },
    }),
  }),
})

export const { useLoginMutation } = authAPI
